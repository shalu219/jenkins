<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.41">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.9"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.9">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
    <org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction plugin="workflow-multibranch@2.21">
      <jobPropertyDescriptors>
        <string>hudson.model.ParametersDefinitionProperty</string>
      </jobPropertyDescriptors>
    </org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@2.5.6">
          <name>EnvironmentAction</name>
          <randomName>choice-parameter-478922334445547</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.78">
              <script>
return [
&quot;IT_DEPLOY&quot;,
&quot;UAT_DEPLOY&quot;,
&quot;PROD_DEPLOY&quot;,
&quot;UAT_PROMOTE&quot;,
&quot;PROD_PROMOTE&quot;
]
        </script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.78">
              <script>return[&apos;error&apos;]</script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureFallbackScript>
          </script>
          <choiceType>PT_SINGLE_SELECT</choiceType>
        </org.biouno.unochoice.ChoiceParameter>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@2.5.6">
          <name>deployModule</name>
          <description></description>
          <randomName>choice-parameter-478922334600952</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.78">
              <script>return[&apos;all&apos;,&apos;XE:crossingengine&apos;,&apos;PS:persistenceserver&apos;,&apos;SDS:staticdataserver&apos;,&apos;FG:fixgateway&apos;,&apos;CE:creditengine&apos;,&apos;FH:mktdatafeedhandler&apos;,&apos;TDB:tradedbwriter&apos;,&apos;TN:tradenotification&apos;,&apos;RG:rest_gateway&apos;,&apos;FM:fixmultiplexer&apos;]</script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.78">
              <script>return[&apos;error&apos;]</script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureFallbackScript>
          </script>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>false</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.ChoiceParameter>
        <org.biouno.unochoice.CascadeChoiceParameter plugin="uno-choice@2.5.6">
          <name>Tags</name>
          <randomName>choice-parameter-478922334758503</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.78">
              <script>import static groovy.io.FileType.FILES
def itDeploy  = &quot;/Users/shalu/rpm/liquimatch-it-repo/noarch&quot;
def uatDeploy  = &quot;/Users/shalu/rpm/liquimatch-uat-repo/noarch&quot;
def prodDeploy  = &quot;/Users/shalu/rpm/liquimatch-prod-repo/noarch&quot;
def uatPromote  = &quot;/Users/shalu/rpm/liquimatch-it-repo/noarch&quot;
def prodPromote  = &quot;/Users/shalu/rpm/liquimatch-uat-repo/noarch&quot;
def rootPath = &quot;&quot;

List default_item = [&quot;None&quot;]

if (EnvironmentAction.equals(&quot;IT_DEPLOY&quot;)){
  rootPath = itDeploy
} else if (EnvironmentAction.equals(&quot;UAT_DEPLOY&quot;)){
  rootPath = uatDeploy
} else if (EnvironmentAction.equals(&quot;PROD_DEPLOY&quot;)){
  rootPath = prodDeploy
} else if (EnvironmentAction.equals(&quot;UAT_PROMOTE&quot;)){
  rootPath = uatPromote
} else if (EnvironmentAction.equals(&quot;PROD_PROMOTE&quot;)){
  rootPath = prodPromote
} else {
  return default_item
}

def dir = new File(rootPath);
def files = [];
dir.eachFileRecurse(FILES) {
  if(it.name.endsWith(&apos;.rpm&apos;)) {
    files &lt;&lt; it.getName()
  }
}
return files.reverse();
        </script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.78">
              <script>return[&apos;error&apos;]</script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureFallbackScript>
          </script>
          <parameters class="linked-hash-map"/>
          <referencedParameters>EnvironmentAction</referencedParameters>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>true</filterable>
          <filterLength>2</filterLength>
        </org.biouno.unochoice.CascadeChoiceParameter>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.74">
    <script>properties([
  parameters([
    [
      $class: &apos;ChoiceParameter&apos;,
      choiceType: &apos;PT_SINGLE_SELECT&apos;,
      name: &apos;EnvironmentAction&apos;,
      script: [$class: &apos;GroovyScript&apos;, 
        fallbackScript: [classpath: [], sandbox: false, script: &apos;return[\&apos;error\&apos;]&apos;], 
        script: [classpath: [], sandbox: false, script: &quot;&quot;&quot;
return [
&quot;IT_DEPLOY&quot;,
&quot;UAT_DEPLOY&quot;,
&quot;PROD_DEPLOY&quot;,
&quot;UAT_PROMOTE&quot;,
&quot;PROD_PROMOTE&quot;
]
        &quot;&quot;&quot;]]
    ],
    [$class: &apos;ChoiceParameter&apos;, 
    choiceType: &apos;PT_SINGLE_SELECT&apos;, 
    description: &apos;&apos;, 
    filterLength: 1, 
    filterable: false, 
    name: &apos;deployModule&apos;, 
    script: [
        $class: &apos;GroovyScript&apos;, 
        fallbackScript: [classpath: [], sandbox: false, script: &apos;return[\&apos;error\&apos;]&apos;], 
        script: [classpath: [], sandbox: false, script: &quot;return[&apos;all&apos;,&apos;XE:crossingengine&apos;,&apos;PS:persistenceserver&apos;,&apos;SDS:staticdataserver&apos;,&apos;FG:fixgateway&apos;,&apos;CE:creditengine&apos;,&apos;FH:mktdatafeedhandler&apos;,&apos;TDB:tradedbwriter&apos;,&apos;TN:tradenotification&apos;,&apos;RG:rest_gateway&apos;,&apos;FM:fixmultiplexer&apos;]&quot;]]
    ], 
    [
      $class: &apos;CascadeChoiceParameter&apos;,
      choiceType: &apos;PT_SINGLE_SELECT&apos;,
      name: &apos;Tags&apos;,
      referencedParameters: &apos;EnvironmentAction&apos;,
      filterLength: 2, 
      filterable: true, 
      script: [
        $class: &apos;GroovyScript&apos;, 
        fallbackScript: [classpath: [], sandbox: false, script: &apos;return[\&apos;error\&apos;]&apos;], 
        script: [classpath: [], sandbox: false, 
        script: &quot;&quot;&quot;import static groovy.io.FileType.FILES
def itDeploy  = &quot;/Users/shalu/rpm/liquimatch-it-repo/noarch&quot;
def uatDeploy  = &quot;/Users/shalu/rpm/liquimatch-uat-repo/noarch&quot;
def prodDeploy  = &quot;/Users/shalu/rpm/liquimatch-prod-repo/noarch&quot;
def uatPromote  = &quot;/Users/shalu/rpm/liquimatch-it-repo/noarch&quot;
def prodPromote  = &quot;/Users/shalu/rpm/liquimatch-uat-repo/noarch&quot;
def rootPath = &quot;&quot;

List default_item = [&quot;None&quot;]

if (EnvironmentAction.equals(&quot;IT_DEPLOY&quot;)){
  rootPath = itDeploy
} else if (EnvironmentAction.equals(&quot;UAT_DEPLOY&quot;)){
  rootPath = uatDeploy
} else if (EnvironmentAction.equals(&quot;PROD_DEPLOY&quot;)){
  rootPath = prodDeploy
} else if (EnvironmentAction.equals(&quot;UAT_PROMOTE&quot;)){
  rootPath = uatPromote
} else if (EnvironmentAction.equals(&quot;PROD_PROMOTE&quot;)){
  rootPath = prodPromote
} else {
  return default_item
}

def dir = new File(rootPath);
def files = [];
dir.eachFileRecurse(FILES) {
  if(it.name.endsWith(&apos;.rpm&apos;)) {
    files &lt;&lt; it.getName()
  }
}
return files.reverse();
        &quot;&quot;&quot;]]
      ]
 ])
])

def getVariables(def serv) {
    println(&quot;Selected Server is &quot; + serv.toUpperCase())
}

pipeline {
    /*A declarative pipeline*/

    agent any
    environment {
        user=&quot;centos&quot;
        rpm=&quot;${server}&quot;
        //PATH = &apos;/usr/bin:/bin/sh:$PATH&apos;
    }

    stages {
        stage(&apos;Initialize the variables&apos;) {
            steps {
                script {
                    //app = sh(script:&quot;echo ${deployModule} | cut -d \&quot;:\&quot; -f1&quot;, returnStdout:true).trim()
                    //subModule = sh(script:&quot;echo ${deployModule} | cut -d \&quot;:\&quot; -f2&quot;, returnStdout:true).trim()
                    server = sh(script:&quot;echo ${EnvironmentAction} | cut -d \&quot;_\&quot; -f1&quot;, returnStdout:true).trim()
                    action = sh(script:&quot;echo ${EnvironmentAction} | cut -d \&quot;_\&quot; -f2&quot;, returnStdout:true).trim()
                    status = sh(returnStatus: true, script:&quot;echo ${EnvironmentAction} | cut -d \&quot;_\&quot; -f1&quot;)
                    if (status != 0) {
                        println(&quot;Failed&quot;)
                    } else {
                        println(&quot;Passed&quot;)
                    }
                }
            }            
        }

        stage(&apos;Promote Package&apos;) {
            when {
                expression { server == &apos;UAT&apos; || server == &apos;PROD&apos; }
            }
            steps {
                println(&quot;Stage Promote Package:: &lt;&lt;${server}&gt;&gt;&lt;&lt;${action}&gt;&gt;&quot;)
            }
        }

        stage(&apos;Deploy&apos;) {
            steps {
                println(&quot;Stage Deploy:: &lt;&lt;${server}&gt;&gt;&lt;&lt;${action}&gt;&gt;&quot;)
                getVariables(&quot;${server}&quot;)
            }
            
        }

        stage(&apos;Installed Version&apos;) {
            steps {
                println(&quot;Stage Installed Version:: &lt;&lt;${server}&gt;&gt;&lt;&lt;${action}&gt;&gt;&quot;)
            }
        }

    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>