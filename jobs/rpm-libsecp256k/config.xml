<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.security.AuthorizationMatrixProperty>
      <inheritanceStrategy class="org.jenkinsci.plugins.matrixauth.inheritance.InheritParentStrategy"/>
      <permission>hudson.model.Item.Build:jli</permission>
      <permission>hudson.model.Item.Build:vbhandari</permission>
      <permission>hudson.model.Item.Configure:jli</permission>
      <permission>hudson.model.Item.Configure:vbhandari</permission>
      <permission>hudson.model.Item.Discover:jli</permission>
      <permission>hudson.model.Item.Discover:vbhandari</permission>
      <permission>hudson.model.Item.Read:jli</permission>
      <permission>hudson.model.Item.Read:vbhandari</permission>
      <permission>hudson.model.Item.Workspace:jli</permission>
      <permission>hudson.model.Item.Workspace:vbhandari</permission>
      <permission>hudson.scm.SCM.Tag:jli</permission>
      <permission>hudson.scm.SCM.Tag:vbhandari</permission>
    </hudson.security.AuthorizationMatrixProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.9.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>git@github.com:otcxn/otcxn-rfq-build</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/secp256k1</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

git clone https://github.com/bitcoin/bitcoin -b v0.16.0 --depth 1 bitcoin;

cd bitcoin/src/secp256k1;
libtoolize;
./autogen.sh;
./configure --prefix=/usr/local --enable-module-ecdh --enable-experimental --enable-jni --disable-benchmark;
make;
./tests;

mkdir -vp src/java/guava;
wget &apos;https://search.maven.org/remotecontent?filepath=com/google/guava/guava/18.0/guava-18.0.jar&apos; -O src/java/guava/guava-18.0.jar;
make check-java;

cd ../../..;
cp -v *gradle* bitcoin/src/secp256k1;
cd bitcoin/src/secp256k1;
gradle build;


if [ &quot;$?&quot; == &quot;0&quot; ]; then
   cd ../../..;
   #timeStamp=$(TZ=&quot;:America/Los_Angeles&quot; date +&quot;%Y%m%d.%H%M%S&quot;)
   
   #cp /tmp/build_rpm/*libsec256k* .
   #cp /tmp/build_rpm/libsecp256k1.so .
   #dir=&quot;/var/lib/jenkins/rpmbuild/RPMS/x86_64/&quot;

   specPath=&quot;/etc/ansible/roles/build_rpm&quot;
   SOURCE_DIR=&quot;/var/lib/jenkins/rpmbuild/RPMS/x86_64&quot;

   cp ${specPath}/*libsec256k* .
   cp ${specPath}/libsecp256k1.so .
   
   echo &quot;Building package rpm in $SOURCE_DIR&quot;
   ./build_rpm_libsec256k.sh
   if [ &quot;$?&quot; != &quot;0&quot; ]; then
	   echo &quot;Packaging failed&quot;
       exit 1
   fi
   
   echo &quot;Packaging Library&quot;
   cd $SOURCE_DIR
   package=`ls -ltr *libsec256k* | tail -1 | cut -d &quot; &quot; -f 9`
   echo &quot;Package : $package&quot;
   #scp -pr $package centos@server2.otcxn.dev:/tmp

# On deployment server: ln -s /usr/local/lib/libsecp256k1.so libsecp256k1.so.0

else
   echo &quot;Build failed&quot;
   exit 1
fi
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

module=&quot;libsec256k&quot;
echo &quot;Copying built RPMs to the local /rpm&quot;
set -e
if [ ! -z &quot;${DEBUG}&quot; ]; then
  set -x
fi

SCRIPT_DIR=$( cd &quot;$( dirname &quot;${BASH_SOURCE[0]}&quot; )&quot; &amp;&amp; pwd )
SRC_BASE=&quot;${SCRIPT_DIR}/../..&quot;
DEPENDENCIES=(&quot;s3cmd&quot; &quot;createrepo&quot;)
REGION=&quot;us-east-2&quot;
SOURCE_DIR=&quot;/var/lib/jenkins/rpmbuild/RPMS/x86_64/&quot;

CACHE_DIR=&quot;/rpm/dev-cache&quot;

for dep in &quot;${DEPENDENCIES[@]}&quot;
do
  if [ ! $(which ${dep}) ]; then
      echo &quot;${dep} must be available.&quot;
      exit 1
  fi
done

if [ -z &quot;${SOURCE_DIR}&quot; ]; then
  echo &quot;Source directory must be specified.&quot;
  exit 1
fi

cd $SOURCE_DIR
package=`ls -t otcxn-${module}-* | head -1`
echo &quot;Package : ${package}&quot;

VERSION=$(echo $package | sed &apos;s/.noarch.rpm//g&apos; | cut -d&apos;-&apos; -f3,4)

TARGET_BUCKET_LIST=&quot;otcxn-it-repo otcxn-qa-repo otcxn-uat-repo otcxn-prod-repo&quot;
for TARGET_BUCKET in $TARGET_BUCKET_LIST
do
  env=$(echo ${TARGET_BUCKET} | cut -d &quot;-&quot; -f 2)
  ROLLBACK_DIR=&quot;/rpm/rollback/${env}/${module}&quot;

  if [ -z &quot;${TARGET_BUCKET}&quot; ]; then
    echo &quot;Target bucket must be specified.&quot;
    exit 1
  fi

  TARGET_DIR=&quot;/rpm/${TARGET_BUCKET}&quot;

  # copy the RPM in and update the repo
  if ! [ -e &quot;$TARGET_DIR&quot; ]; then
      mkdir -pv $TARGET_DIR
  fi
  cp -rv $SOURCE_DIR/${package} $TARGET_DIR/noarch/${module}
  echo &quot;Moved package $package to $TARGET_DIR/noarch/${module}&quot;

  # Keep track of versions deployed
  echo $VERSION &gt;&gt; $TARGET_DIR/pkg-info/${module}-version.info

  # save a version file for rollback
  touch $ROLLBACK_DIR/$VERSION

done
rm -rf $SOURCE_DIR/${package}
#sleep 60
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

echo &quot;Publishes built RPMs to the local RPM repo.&quot;
TARGET_BUCKET_LIST=&quot;otcxn-it-repo otcxn-qa-repo otcxn-uat-repo otcxn-prod-repo&quot;

for TARGET_BUCKET in $TARGET_BUCKET_LIST
do
  env=$(echo ${TARGET_BUCKET} | cut -d &quot;-&quot; -f 2)
  CACHE_DIR=&quot;/rpm/${TARGET_BUCKET}/${env}-cache&quot;
  TARGET_DIR=&quot;/rpm/${TARGET_BUCKET}&quot;

  if ! [ -e &quot;$TARGET_DIR&quot; ]; then
      mkdir -pv $TARGET_DIR
  fi

  UPDATE=&quot;&quot;
  if [ -e &quot;$TARGET_DIR/repodata/repomd.xml&quot; ]; then
    UPDATE=&quot;--update &quot;
  fi

  createrepo --cachedir=$CACHE_DIR --workers 4 -v $UPDATE --deltas $TARGET_DIR/ --max-delta-rpm-size 399999999

done

</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>