<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.41">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.9"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.9">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
    <org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction plugin="workflow-multibranch@2.21">
      <jobPropertyDescriptors>
        <string>hudson.model.ParametersDefinitionProperty</string>
      </jobPropertyDescriptors>
    </org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@2.5.6">
          <name>EnvironmentAction</name>
          <randomName>choice-parameter-703028240879816</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.78">
              <script>
return [
&quot;IT_DEPLOY&quot;,
&quot;UAT_DEPLOY&quot;,
&quot;PROD_DEPLOY&quot;,
&quot;UAT_PROMOTE&quot;,
&quot;PROD_PROMOTE&quot;
]
        </script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.78">
              <script>return[&apos;error&apos;]</script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureFallbackScript>
          </script>
          <choiceType>PT_SINGLE_SELECT</choiceType>
        </org.biouno.unochoice.ChoiceParameter>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@2.5.6">
          <name>deployModule</name>
          <description></description>
          <randomName>choice-parameter-703028241836546</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.78">
              <script>return[&apos;all&apos;,&apos;XE:crossingengine&apos;,&apos;PS:persistenceserver&apos;,&apos;SDS:staticdataserver&apos;,&apos;FG:fixgateway&apos;,&apos;CE:creditengine&apos;,&apos;FH:mktdatafeedhandler&apos;,&apos;TDB:tradedbwriter&apos;,&apos;TN:tradenotification&apos;,&apos;RG:rest_gateway&apos;,&apos;FM:fixmultiplexer&apos;]</script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.78">
              <script>return[&apos;error&apos;]</script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureFallbackScript>
          </script>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>true</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.ChoiceParameter>
        <org.biouno.unochoice.CascadeChoiceParameter plugin="uno-choice@2.5.6">
          <name>version</name>
          <randomName>choice-parameter-703028243534639</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.78">
              <script>
import static groovy.io.FileType.FILES
def itDeploy  = &quot;/Users/shalu/rpm/liquimatch-it-repo/noarch&quot;
def uatDeploy  = &quot;/Users/shalu/rpm/liquimatch-uat-repo/noarch&quot;
def prodDeploy  = &quot;/Users/shalu/rpm/liquimatch-prod-repo/noarch&quot;
def uatPromote  = &quot;/Users/shalu/rpm/liquimatch-it-repo/noarch&quot;
def prodPromote  = &quot;/Users/shalu/rpm/liquimatch-uat-repo/noarch&quot;
def rootPath = &quot;&quot;

List default_item = [&quot;None&quot;]

if (EnvironmentAction.equals(&quot;IT_DEPLOY&quot;)){
  rootPath = itDeploy
} else if (EnvironmentAction.equals(&quot;UAT_DEPLOY&quot;)){
  rootPath = uatDeploy
} else if (EnvironmentAction.equals(&quot;PROD_DEPLOY&quot;)){
  rootPath = prodDeploy
} else if (EnvironmentAction.equals(&quot;UAT_PROMOTE&quot;)){
  rootPath = uatPromote
} else if (EnvironmentAction.equals(&quot;PROD_PROMOTE&quot;)){
  rootPath = prodPromote
} else {
  return default_item
}

def dir = new File(rootPath);
def files = [];
dir.eachFileRecurse(FILES) {
  if(it.name.endsWith(&apos;.noarch.rpm&apos;)) {
    files &lt;&lt; it.getName()
  }
}
//return files.reverse();
return files
        </script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.78">
              <script>return[&apos;error&apos;]</script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureFallbackScript>
          </script>
          <parameters class="linked-hash-map"/>
          <referencedParameters>EnvironmentAction</referencedParameters>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>true</filterable>
          <filterLength>2</filterLength>
        </org.biouno.unochoice.CascadeChoiceParameter>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@2.5.6">
          <name>rollback</name>
          <randomName>choice-parameter-703028244148593</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.78">
              <script>return[&apos;no&apos;,&apos;yes&apos;]</script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.78">
              <script>return[&apos;error&apos;]</script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureFallbackScript>
          </script>
          <choiceType>PT_SINGLE_SELECT</choiceType>
        </org.biouno.unochoice.ChoiceParameter>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.74">
    <script>properties([
  parameters([
    [
      $class: &apos;ChoiceParameter&apos;,
      choiceType: &apos;PT_SINGLE_SELECT&apos;,
      name: &apos;EnvironmentAction&apos;,
      script: [$class: &apos;GroovyScript&apos;, 
        fallbackScript: [classpath: [], sandbox: false, script: &apos;return[\&apos;error\&apos;]&apos;], 
        script: [classpath: [], sandbox: false, script: &quot;&quot;&quot;
return [
&quot;IT_DEPLOY&quot;,
&quot;UAT_DEPLOY&quot;,
&quot;PROD_DEPLOY&quot;,
&quot;UAT_PROMOTE&quot;,
&quot;PROD_PROMOTE&quot;
]
        &quot;&quot;&quot;]]
    ],
    [$class: &apos;ChoiceParameter&apos;, 
    choiceType: &apos;PT_SINGLE_SELECT&apos;, 
    description: &apos;&apos;, 
    filterLength: 1, 
    filterable: true, 
    name: &apos;deployModule&apos;, 
    script: [
        $class: &apos;GroovyScript&apos;, 
        fallbackScript: [classpath: [], sandbox: false, script: &apos;return[\&apos;error\&apos;]&apos;], 
        script: [classpath: [], sandbox: false, script: &quot;return[&apos;all&apos;,&apos;XE:crossingengine&apos;,&apos;PS:persistenceserver&apos;,&apos;SDS:staticdataserver&apos;,&apos;FG:fixgateway&apos;,&apos;CE:creditengine&apos;,&apos;FH:mktdatafeedhandler&apos;,&apos;TDB:tradedbwriter&apos;,&apos;TN:tradenotification&apos;,&apos;RG:rest_gateway&apos;,&apos;FM:fixmultiplexer&apos;]&quot;]]
    ], 
    [
      $class: &apos;CascadeChoiceParameter&apos;,
      choiceType: &apos;PT_SINGLE_SELECT&apos;,
      name: &apos;version&apos;,
      filterLength: 2, 
      filterable: true, 
      referencedParameters: &apos;EnvironmentAction&apos;,
      script: [
        $class: &apos;GroovyScript&apos;, 
        fallbackScript: [classpath: [], sandbox: false, script: &apos;return[\&apos;error\&apos;]&apos;], 
        script: [classpath: [], sandbox: false, 
        script: &quot;&quot;&quot;
import static groovy.io.FileType.FILES
def itDeploy  = &quot;/Users/shalu/rpm/liquimatch-it-repo/noarch&quot;
def uatDeploy  = &quot;/Users/shalu/rpm/liquimatch-uat-repo/noarch&quot;
def prodDeploy  = &quot;/Users/shalu/rpm/liquimatch-prod-repo/noarch&quot;
def uatPromote  = &quot;/Users/shalu/rpm/liquimatch-it-repo/noarch&quot;
def prodPromote  = &quot;/Users/shalu/rpm/liquimatch-uat-repo/noarch&quot;
def rootPath = &quot;&quot;

List default_item = [&quot;None&quot;]

if (EnvironmentAction.equals(&quot;IT_DEPLOY&quot;)){
  rootPath = itDeploy
} else if (EnvironmentAction.equals(&quot;UAT_DEPLOY&quot;)){
  rootPath = uatDeploy
} else if (EnvironmentAction.equals(&quot;PROD_DEPLOY&quot;)){
  rootPath = prodDeploy
} else if (EnvironmentAction.equals(&quot;UAT_PROMOTE&quot;)){
  rootPath = uatPromote
} else if (EnvironmentAction.equals(&quot;PROD_PROMOTE&quot;)){
  rootPath = prodPromote
} else {
  return default_item
}

def dir = new File(rootPath);
def files = [];
dir.eachFileRecurse(FILES) {
  if(it.name.endsWith(&apos;.noarch.rpm&apos;)) {
    files &lt;&lt; it.getName()
  }
}
//return files.reverse();
return files
        &quot;&quot;&quot;]]
    ],
    [
      $class: &apos;ChoiceParameter&apos;,
      choiceType: &apos;PT_SINGLE_SELECT&apos;,
      name: &apos;rollback&apos;,
      script: [$class: &apos;GroovyScript&apos;, 
        fallbackScript: [classpath: [], sandbox: false, script: &apos;return[\&apos;error\&apos;]&apos;], 
        script: [classpath: [], sandbox: false, script: &quot;return[&apos;no&apos;,&apos;yes&apos;]&quot;]]
    ]
 ])
])

def promotePackage(def SRC_BUCKET, def TAR_BUCKET) {
    script {
        SOURCE_DIR=&quot;${home_dir}/rpm/${SRC_BUCKET}&quot;
        TARGET_DIR=&quot;${home_dir}/rpm/${TAR_BUCKET}&quot;
        CACHE_DIR=&quot;${TARGET_DIR}/${server}-cache&quot;
        PKG_TARGET_DIR=&quot;${TARGET_DIR}/pkg-info&quot;
        
        println(&quot;Vars inside promotePackage:&quot; + SOURCE_DIR + TARGET_DIR + CACHE_DIR + PKG_TARGET_DIR)
        if (!fileExists(&quot;${SOURCE_DIR}&quot;)) {
            println(&quot;ERROR: ${SOURCE_DIR} does not exists&quot;)
            sh &apos;exit 1&apos;;
        }
        if (!fileExists(&quot;${TARGET_DIR}&quot;)) {
            sh &quot;mkdir -pv ${TARGET_DIR}&quot;
        }
        if (!fileExists(&quot;${TARGET_DIR}/noarch&quot;)) {
            sh &quot;mkdir -pv ${TARGET_DIR}/noarch&quot;
        }
        if (fileExists(&quot;${TARGET_DIR}/noarch/${version}&quot;)) {
            println(&quot;ERROR: Package already Promoted to &quot; + server)
            println(&quot;Please start &quot; + server + &quot;_DEPLOY for deploy only&quot;)
            sh &apos;exit 1&apos;;
        }
    }
    script {
        if (&quot;${deployModule}&quot; != &quot;all&quot;) {
            sh &quot;cp -rv $SOURCE_DIR/noarch/$version $TARGET_DIR/noarch/&quot;
        }
        else {
            allVer = sh(script:&quot;echo $version | cut -d &apos;-&apos; -f3&quot;, returnStdout:true).trim()
            sh &quot;cp -rv $SOURCE_DIR/noarch/*${allVer} $TARGET_DIR/noarch/&quot;
            sh &quot;ls -ltr $TARGET_DIR/noarch/*${allVer}&quot;
        }
    }    
    
    def UPDATE = &quot;&quot;
    if (fileExists(&quot;$TARGET_DIR/noarch/repodata/repomd.xml&quot;)) {
        UPDATE = &quot;--update&quot;
    }
    echo &quot;TEST OUTPUT:: &lt;&lt;${UPDATE}&gt;&gt;&lt;&lt;${CACHE_DIR}&gt;&gt;&lt;&lt;${SOURCE_DIR}&gt;&gt;&lt;&lt;${TARGET_DIR}&gt;&gt;&quot;
    //createrepo --cachedir=$CACHE_DIR --workers 4 -v $UPDATE --deltas $TARGET_DIR/ --max-delta-rpm-size 399999999
}
def promoteTag(def SRC_BUCKET, def TAR_BUCKET) {
    script {
        SOURCE_DIR=&quot;${home_dir}/rpm/${SRC_BUCKET}&quot;
        TARGET_DIR=&quot;${home_dir}/rpm/${TAR_BUCKET}&quot;
        PKG_TARGET_DIR=&quot;${TARGET_DIR}/pkg-info&quot;
        ROLLBACK_DIR=&quot;${home_dir}/rpm/rollback/${server}/ogguniverse&quot;

        if (!fileExists(&quot;${PKG_TARGET_DIR}&quot;)) {
            sh &quot;mkdir -pv ${PKG_TARGET_DIR}&quot;
        }
        //VERSION = sh(script:&quot;ls -t ${TARGET_DIR}/noarch/${version} | head -n1 | cut -d&apos;/&apos; -f7 | cut -d&apos;-&apos; -f3&quot;, returnStdout:true).trim()
        sh &quot;echo ${pkgVERSION} &gt;&gt; ${PKG_TARGET_DIR}/version.info&quot;
        sh &quot;touch $ROLLBACK_DIR/${pkgVERSION}&quot;

        if (!fileExists(&quot;${TARGET_DIR}/tags&quot;)) {
            sh &quot;mkdir -pv ${TARGET_DIR}/tags&quot;
        }
        PROMOTE_TAG = sh(script:&quot;ls -t $SOURCE_DIR/tags | head -n1&quot;, returnStdout:true).trim()

        sh &quot;cp -rv ${SOURCE_DIR}/tags/${PROMOTE_TAG} ${TARGET_DIR}/tags/&quot;
        println(&quot;Tag promoted: &quot; + PROMOTE_TAG)
    }
}
def deployOnServer() {
    println(&quot;rollback=${rollback} host=${host} user=${user} rpm=${rpm} verSubModule=${verSubModule}&quot;)
    script {
        if (&quot;${deployModule}&quot; != &quot;all&quot;) {
            status = sh(returnStatus: true, script: &quot;sudo ansible-playbook -u $user $ansibleDir/playbook/liquimatchDeploy.yml --tags \&quot;submodule\&quot; --extra-vars \&quot;rollback=${rollback} host=${host} user=${user} rpm=${rpm} verSubModule=${verSubModule}\&quot;&quot;)
        } else {
            verAllModule = sh(script:&quot;echo $verSubModule | cut -d &apos;-&apos; -f2,3&quot;, returnStdout:true).trim()
            status = sh(returnStatus: true, script: &quot;sudo ansible-playbook -u $user $ansibleDir/playbook/liquimatchDeploy.yml --tags \&quot;fullLM\&quot; --extra-vars \&quot;rollback=${rollback} host=${host} user=${user} rpm=${rpm} verAllModule=${verAllModule} LM_VERSION=${LM_VERSION}\&quot;&quot;)
        }
        
        if (status != 0) {
            println(&quot;Deploy Failed&quot;)
            sh &apos;exit 1&apos;
        }
    }
}

pipeline {
    /*A declarative pipeline*/

    agent any
    environment {
        home_dir=&quot;/Users/shalu&quot;
        user=&quot;centos&quot;
        LM_VERSION=&quot;dt-0.47-SNAPSHOT&quot;
        ansibleDir=&quot;/Users/shalu/git-user-repo/ansible&quot;
        //ansibleDir=&quot;/etc/ansible&quot;
    }

    stages {
        stage(&apos;Initialize the variables&apos;) {
            steps {
                script {
                    server = sh(script:&quot;echo ${EnvironmentAction} | cut -d &apos;_&apos; -f1&quot;, returnStdout:true).trim()
                    action = sh(script:&quot;echo ${EnvironmentAction} | cut -d &apos;_&apos; -f2&quot;, returnStdout:true).trim()
                    rpm = server.toLowerCase()
                    app = sh(script:&quot;echo ${deployModule} | cut -d &apos;:&apos; -f1&quot;, returnStdout:true).trim()
                    subModule = sh(script:&quot;echo ${deployModule} | cut -d &apos;:&apos; -f2&quot;, returnStdout:true).trim()
                    verSubModule = sh(script:&quot;echo ${version} | sed &apos;s/.noarch.rpm//g&apos;&quot;, returnStdout:true).trim()
                    pkgVERSION = sh(script:&quot;echo ${version} | cut -d &apos;-&apos; -f3&quot;, returnStdout:true).trim()
                    verCheckModule = sh(script:&quot;echo ${version} | sed &apos;s/.noarch.rpm//g&apos; | cut -d &apos;-&apos; -f1&quot;, returnStdout:true).trim()

                    println(&quot;All vars :&quot; + server + &quot;:&quot; + action + &quot;:&quot; + rpm + &quot;:&quot; + app + &quot;:&quot; + subModule + &quot;:&quot; + verSubModule + &quot;:&quot; + pkgVERSION + &quot;:&quot; + verCheckModule)

                    if ( app != verCheckModule ) {
                        println(&quot;ERROR: choose correct subModule and version&quot;)
                        sh &apos;exit 1&apos;
                    }
                }
            }
        }
        stage(&apos;PROD Confirmation&apos;) {
            when {
                expression { server == &apos;PROD&apos; }
            }
            steps {
                script {
                    if ( server == &quot;PROD&quot;) {
                        timeout(3) {    // timeout after 3 mins
                            script {
                                input(message: &apos;You have selected PROD. Do you want to continue?&apos;, ok: &apos;Proceed&apos;)
                            }
                        }
                    }
                }
            }
            
        }

        stage(&apos;Promote Package&apos;) {
            when {
                expression { action == &apos;PROMOTE&apos; }
            }
            steps {
                println(&quot;Stage Promote Package:: &lt;&lt;${server}&gt;&gt;&lt;&lt;${action}&gt;&gt;&quot;)
                script {
                    //def repo = [&apos;s3cmd&apos;, &apos;createrepo&apos;]
                    def repo = [&apos;s3cmd&apos;]
                    for (int i = 0; i &lt; repo.size(); ++i) {
                        echo &quot;Testing the ${repo[i]} repo&quot;
                        check = sh(script:&quot;which ${repo[i]}&quot;, returnStdout:true).trim()
                        echo check
                    }

                    if ( server == &quot;UAT&quot;) {
                        SOURCE_BUCKET=&quot;liquimatch-development-repo&quot;
                        TARGET_BUCKET=&quot;liquimatch-uat-repo&quot;
                    } else if ( server == &quot;PROD&quot;) {
                        SOURCE_BUCKET=&quot;liquimatch-uat-repo&quot;
                        TARGET_BUCKET=&quot;liquimatch-prod-repo&quot;
                    }
                    println(&quot;Check SOURCE_BUCKET and TARGET_BUCKET variables :&quot; + SOURCE_BUCKET + &quot;:&quot; + TARGET_BUCKET)
                    promotePackage(SOURCE_BUCKET, TARGET_BUCKET)
                    promoteTag(SOURCE_BUCKET, TARGET_BUCKET)
                }
            }
        }

        stage(&apos;Deploy IT&apos;) {
            when {
                expression { server == &apos;IT&apos; }
            }
            steps {
                println(&quot;Stage Deploy:: &lt;&lt;${server}&gt;&gt;&lt;&lt;${action}&gt;&gt;&quot;)
                script {
                    user=&quot;centos&quot;
                    host=&quot;host&quot; + server
                    rpm=&quot;development&quot;
                }
                println(&quot;User:Host:RPM::&quot; + user + host + rpm)
                deployOnServer()
            }
            
        }
        stage(&apos;Deploy UAT&apos;) {
            when {
                expression { server == &apos;UAT&apos; }
            }
            steps {
                println(&quot;Stage Deploy:: &lt;&lt;${server}&gt;&gt;&lt;&lt;${action}&gt;&gt;&quot;)
                script {
                    user=&quot;centos&quot;
                    host=&quot;OTCXN-&quot; + server
                }
                println(&quot;User:Host:RPM::&quot; + user + host + rpm)
                deployOnServer()
            }
            
        }
        stage(&apos;Deploy PROD&apos;) {
            when {
                expression { server == &apos;PROD&apos; }
            }
            steps {
                println(&quot;Stage Deploy:: &lt;&lt;${server}&gt;&gt;&lt;&lt;${action}&gt;&gt;&quot;)
                script {
                    user=&quot;otcxn&quot;
                    host=&quot;LD4-OTCXN-&quot; + server
                }
                println(&quot;User:Host:RPM::&quot; + user + host + rpm)
                deployOnServer()
            }
            
        }

        stage(&apos;Installed Version&apos;) {
            steps {
                println(&quot;Stage Installed Version:: &lt;&lt;${server}&gt;&gt;&lt;&lt;${action}&gt;&gt;&quot;)
                sh &quot;sudo ansible -u $user -a \&quot;rpm -qa ${app} warn=False\&quot; ${host} | tail -1&quot;
            }
        }

    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>