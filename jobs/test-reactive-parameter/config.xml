<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.41">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.9"/>
    <org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction plugin="workflow-multibranch@2.21">
      <jobPropertyDescriptors>
        <string>hudson.model.ParametersDefinitionProperty</string>
      </jobPropertyDescriptors>
    </org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.9">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>true</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@2.5.6">
          <name>server</name>
          <description></description>
          <randomName>choice-parameter-303998978260443</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.78">
              <script>return[&apos;it&apos;,&apos;uat&apos;,&apos;prod&apos;]</script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.78">
              <script>return[&apos;error&apos;]</script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureFallbackScript>
          </script>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>true</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.ChoiceParameter>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@2.5.6">
          <name>deployModule</name>
          <description></description>
          <randomName>choice-parameter-303998978736397</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.78">
              <script>return[&apos;all&apos;,&apos;XE:crossingengine&apos;,&apos;PS:persistenceserver&apos;,&apos;SDS:staticdataserver&apos;,&apos;FG:fixgateway&apos;,&apos;CE:creditengine&apos;,&apos;FH:mktdatafeedhandler&apos;,&apos;TDB:tradedbwriter&apos;,&apos;TN:tradenotification&apos;,&apos;RG:rest_gateway&apos;,&apos;FM:fixmultiplexer&apos;]</script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.78">
              <script>return[&apos;error&apos;]</script>
              <sandbox>false</sandbox>
              <classpath/>
            </secureFallbackScript>
          </script>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>true</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.ChoiceParameter>
        <alex.jenkins.plugins.FileSystemListParameterDefinition plugin="filesystem-list-parameter-plugin@0.0.5">
          <name>version</name>
          <description></description>
          <nodeName>master</nodeName>
          <path>/Users/shalu/rpm/liquimatch-development-repo/noarch</path>
          <selectedType>FILE</selectedType>
          <sortByLastModified>false</sortByLastModified>
          <sortReverseOrder>true</sortReverseOrder>
          <selectedEnumType>FILE</selectedEnumType>
          <regexIncludePattern></regexIncludePattern>
          <regexExcludePattern></regexExcludePattern>
        </alex.jenkins.plugins.FileSystemListParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.74">
    <script>def getVariables(def serv) {
    println(&quot;Selected Server is &quot; + serv.toUpperCase())
}

pipeline {
    /*A declarative pipeline*/

    agent any
    environment {
        user=&quot;centos&quot;
        rpm=&quot;${server}&quot;
    }

    stages {
        stage(&apos;Setup parameters&apos;) {
            steps {
                script {
                    properties([
                        parameters([
                            [$class: &apos;ChoiceParameter&apos;, 
                            choiceType: &apos;PT_SINGLE_SELECT&apos;, 
                            description: &apos;&apos;, 
                            filterLength: 1, 
                            filterable: true, 
                            name: &apos;server&apos;, 
                            script: [
                                $class: &apos;GroovyScript&apos;, 
                                fallbackScript: [classpath: [], sandbox: false, script: &apos;return[\&apos;error\&apos;]&apos;], 
                                script: [classpath: [], sandbox: false, script: &apos;return[\&apos;it\&apos;,\&apos;uat\&apos;,\&apos;prod\&apos;]&apos;]]
                            ], 

                            [$class: &apos;ChoiceParameter&apos;, 
                            choiceType: &apos;PT_SINGLE_SELECT&apos;, 
                            description: &apos;&apos;, 
                            filterLength: 1, 
                            filterable: true, 
                            name: &apos;deployModule&apos;, 
                            script: [
                                $class: &apos;GroovyScript&apos;, 
                                fallbackScript: [classpath: [], sandbox: false, script: &apos;return[\&apos;error\&apos;]&apos;], 
                                script: [classpath: [], sandbox: false, script: &apos;return[\&apos;all\&apos;,\&apos;XE:crossingengine\&apos;,\&apos;PS:persistenceserver\&apos;,\&apos;SDS:staticdataserver\&apos;,\&apos;FG:fixgateway\&apos;,\&apos;CE:creditengine\&apos;,\&apos;FH:mktdatafeedhandler\&apos;,\&apos;TDB:tradedbwriter\&apos;,\&apos;TN:tradenotification\&apos;,\&apos;RG:rest_gateway\&apos;,\&apos;FM:fixmultiplexer\&apos;]&apos;]]
                            ], 

                            [$class: &apos;FileSystemListParameterDefinition&apos;, 
                            description: &apos;&apos;, 
                            name: &apos;version&apos;, 
                            nodeName: &apos;master&apos;, 
                            path: &apos;/Users/shalu/rpm/liquimatch-development-repo/noarch&apos;, 
                            regexExcludePattern: &apos;&apos;, 
                            regexIncludePattern: &apos;&apos;, 
                            selectedType: &apos;FILE&apos;, 
                            sortByLastModified: false, 
                            sortReverseOrder: true],

                        ])
                    ])
                    println(&apos;Server&apos; + server)
                    println(&apos;deployModule&apos; + deployModule)
                    println(&apos;version&apos; + version)
                }
            }
        }
        stage(&apos;Initialize the variables&apos;) {
            steps {
                script {
                    app = sh(script:&quot;echo ${deployModule} | cut -d \&quot;:\&quot; -f1&quot;, returnStdout:true).trim()
                    subModule = sh(script:&quot;echo ${deployModule} | cut -d \&quot;:\&quot; -f2&quot;, returnStdout:true).trim()
                }
                println(&apos;Server&apos; + server)
                println(&apos;deployModule&apos; + deployModule)
                println(&apos;version&apos; + version)
                println(&apos;app&apos; + app)
                println(&apos;subModule&apos; + subModule)
            }            
        }

        stage(&apos;Promote Package&apos;) {
            when {
                expression { server == &apos;uat&apos; || server == &apos;prod&apos; }
            }
            steps {
                println(&quot;Stage Promote Package:: &lt;&lt;${app}&gt;&gt;&lt;&lt;${subModule}&gt;&gt;&quot;)
            }
        }

        stage(&apos;Deploy&apos;) {
            steps {
                println(&quot;Stage Deploy:: &lt;&lt;${app}&gt;&gt;&lt;&lt;${subModule}&gt;&gt;&quot;)
                getVariables(&quot;${server}&quot;)

                println(&apos;Server&apos; + server)
                println(&apos;deployModule&apos; + deployModule)
                println(&apos;version&apos; + version)
            }
            
        }

        stage(&apos;Installed Version&apos;) {
            steps {
                println(&quot;Stage Installed Version:: &lt;&lt;${app}&gt;&gt;&lt;&lt;${subModule}&gt;&gt;&quot;)
                println(&apos;Server&apos; + server)
                println(&apos;deployModule&apos; + deployModule)
                println(&apos;version&apos; + version)
            }
        }

    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>