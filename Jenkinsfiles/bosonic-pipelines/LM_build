/*
Created on Sep 1, 2021
@author: shalusrivastava
*/

//def rpm = "development"
def bosonic_dir = "/var/lib/jenkins/.m2/repository/com/bosonic"
def publishPackage() {
    sh "cp -rv $SOURCE_DIR $TARGET_DIR"
    def UPDATE = ""
    if (fileExists("$TARGET_DIR/noarch/repodata/repomd.xml")) {
        UPDATE = "--update"
    }
    sh "createrepo --cachedir=$CACHE_DIR --workers 4 -v $UPDATE --deltas $TARGET_DIR/ --max-delta-rpm-size 6999999999"
}
def gitTagVersion() {
    /*script {
        timeStamp = sh(script:"TZ=\":America/Los_Angeles\" date +\"%Y%m%d\"", returnStdout:true).trim()
    }*/
    //println("RELEASE VERSION: " + version)
    sh "echo ${version} >> ${PKG_DIR}/version.info"
    sh "touch $ROLLBACK_DIR/$version"

    echo "tag version in github"
    verNum="LM.${version}.v${BUILD_NUMBER}"
    println("TAG VERSION: " + verNum)
    sh """#!/bin/bash
    set -e
    git tag ${verNum}
    git push origin ${verNum}

    mkdir -p ${TARGET_DIR}/tags
    touch ${TARGET_DIR}/tags/${verNum}
    """
}

pipeline {
    /*A declarative pipeline*/

    agent any
    parameters {
        string(name: 'fromBranch', defaultValue: 'master', description: '(Please do not put "origin" with branch name.)')
    }

    environment {
        //fromBranch="master"
        SOURCE_DIR="${WORKSPACE}/rpmbuild/RPMS/*"
        TARGET_BUCKET="bosonic-lm-repo"
        TARGET_DIR="/rpm/${TARGET_BUCKET}"
        CACHE_DIR="${TARGET_DIR}/dev-cache"
        PKG_DIR="${TARGET_DIR}/pkg-info"
        ROLLBACK_DIR="/rpm/rollback/it/bosonic-lm"
    }

    stages {
        stage('Checkout branch') {
            steps {
                println("Workspace Cleanup")
                cleanWs()
                sh """#!/bin/bash
                set -e
                if [ -d ${bosonic_dir} ]; then 
                    rm -rf ${bosonic_dir};
                    echo "BT libs removed from <<${bosonic_dir}>>"
                fi
                """
                git branch: "${fromBranch}", url: 'https://github.com/otcxn/bosonic-lm.git'
            }
        }

        stage('Release') {
            steps {
                script {
                    snap_version = sh(script:"mvn help:evaluate -Dexpression=project.version -q -DforceStdout", returnStdout:true).trim()
                    version = sh(script:"echo $snap_version | cut -d '-' -f1", returnStdout:true).trim()
                    
                    println("RELEASE BOSONIC LM from '${fromBranch}' branch....")
                    sh "mvn clean -DskipTests -Darguments=-DskipTests release:prepare --batch-mode"
                    sh "mvn -DskipTests -Darguments=-DskipTests release:perform -B -s settings.xml"

                    //println("RELEASE VERSION: " + version)
                    commit = sh(script:"git rev-parse --short HEAD", returnStdout:true).trim()
                    gitTagVersion()
                }
            }
        }

        stage('Create RPM package') {
            steps {
                git branch: "master", url: 'https://github.com/otcxn/devops-tools.git'
                sh "./rpm/build_bosonic-lm.sh ${commit} ${version}"

                println("Publishing RPM..")

                script{
                    def repo = ['s3cmd', 'createrepo']
                    for (int i = 0; i < repo.size(); ++i) {
                        check = sh(script:"which ${repo[i]}", returnStdout:true).trim()
                    }

                    if ("${SOURCE_DIR}".isEmpty()) {
                        println("Source directory must be specified.")
                        sh 'exit 1';
                    }
                    if (!fileExists("${TARGET_DIR}")) {
                        sh "mkdir -pv ${TARGET_DIR}"
                    }
                    if (!fileExists("${PKG_DIR}")) {
                        sh "mkdir -pv ${PKG_DIR}"
                    }
                    if ("${TARGET_BUCKET}".isEmpty()) {
                        println("ERROR: Target bucket must be specified.")
                        sh 'exit 1'
                    }
                }

                publishPackage()
            }
        }

        stage('Version Info') {
            steps {
                println("RELEASE VERSION: " + version)
            }
        }
    }
}
