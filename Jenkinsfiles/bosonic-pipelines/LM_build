// author : ssrivastava
// date : sep 1 2021

def rpm = "development"
def otcxn_dir = "/var/lib/jenkins/.m2/repository/com/otcxn"
def checkoutBranch() {
    println("subModule is "+ app + ", and fromBranch is " + fromBranch)
    script{
        tagExist = sh(script:"git -C ./${subModule} branch -a | grep ${fromBranch} | tr -d \" \"", returnStdout:true).trim()
        println("tagExist=" + tagExist)
        if (!"${tagExist}".isEmpty()) {
            sh "repo forall ${subModule} -c \"git checkout origin/${fromBranch}\""
            println("Status after branch checkout")
            sh "repo forall -c \"git status\""
        } else {
            println("ERROR: Branch ${fromBranch} does not exist in ${subModule}")
            sh 'exit 1'
        }
    }
}
def publishPackage() {
    sh "cp -rv $SOURCE_DIR $TARGET_DIR"
    def UPDATE = ""
    if (fileExists("$TARGET_DIR/noarch/repodata/repomd.xml")) {
        UPDATE = "--update"
    }
    echo "TEST OUTPUT:: <<${UPDATE}>><<${CACHE_DIR}>><<${SOURCE_DIR}>><<${TARGET_DIR}>>"
    sh "createrepo --cachedir=$CACHE_DIR --workers 4 -v $UPDATE --deltas $TARGET_DIR/ --max-delta-rpm-size 399999999"
}
def gitTagVersion() {
    script {
        if ("${buildModule}" != "all") {
            VERSION = sh(script:"ls -t ${TARGET_DIR}/noarch/${app}* | head -n1 | cut -d'/' -f5 | cut -d'-' -f3", returnStdout:true).trim()
        } else {
            VERSION = sh(script:"ls -t ${TARGET_DIR}/noarch | head -n1 | cut -d'-' -f3", returnStdout:true).trim()
            //sh "touch ${TARGET_DIR}/noarch/all-dt-${VERSION}"
        }
        println("PACKAGE VERSION: " + VERSION)
        sh "echo ${VERSION} >> ${PKG_DIR}/version.info"
        sh "touch $ROLLBACK_DIR/$VERSION"
    }

    echo "tag version"
    script {
        if ("${buildModule}" != "all") {
            verNum="subModule_${app}_${BUILD_NUMBER}_${timeStamp}"
        } else {
            verNum="OggUniverse_${BUILD_NUMBER}_${timeStamp}"
        }
    }
    println("TAG VERSION: " + verNum)
    sh """#!/bin/bash
    set -e
    cd ${WORKSPACE}/build
    git tag ${verNum}
    git push origin ${verNum}

    mkdir -p ${TARGET_DIR}/tags
    touch ${TARGET_DIR}/tags/${verNum}
    """
}

pipeline {
    /*A declarative pipeline*/

    agent any
    parameters {
        string(name: 'fromBranch', defaultValue: 'master', description: '(Please do not put "origin" with branch name.)')
        choice(name: 'buildModule', choices: ['all', 'XE:crossingengine', 'PS:persistenceserver', 'SDS:staticdataserver', 'FG:fixgateway', 'CE:creditengine', 'FH:mktdatafeedhandler', 'TDB:tradedbwriter', 'TN:tradenotification', 'RG:rest_gateway', 'FM:fixmultiplexer'], description: '(buildModule "all" will be done from master)')
    }

    environment {
        SOURCE_DIR="**/**/rpm/**/RPMS/*"
        TARGET_BUCKET="liquimatch-${rpm}-repo"
        TARGET_DIR = "/rpm/${TARGET_BUCKET}"
        CACHE_DIR="${TARGET_DIR}/dev-cache"
        PKG_DIR="${TARGET_DIR}/pkg-info"
        ROLLBACK_DIR="/rpm/rollback/it/ogguniverse"
    }

    stages {
        stage('Verify inputs') {
            steps {
                script {
                    if ("${fromBranch}".isEmpty()) {
                        println("ERROR: Parameters can not be empty.")
                        println("Branch Passed:<<${fromBranch}>>")
                        sh 'exit 1'
                    }
                }
            }
        }

        stage('Initialize the variables') {
            steps {
                script {
                    app = sh(script:"echo ${buildModule} | cut -d \":\" -f1", returnStdout:true).trim()
                    subModule = sh(script:"echo ${buildModule} | cut -d \":\" -f2", returnStdout:true).trim()
                    timeStamp = sh(script:"TZ=\":America/Los_Angeles\" date +\"%Y%m%d\"", returnStdout:true).trim()
                }
            }            
        }
        
        stage('Checkout branch') {
            steps {
                sh """#!/bin/bash
                set -e
                if [ -d ${otcxn_dir} ]; then 
                    rm -rf ${otcxn_dir};
                    echo "BT libs removed from <<${otcxn_dir}>>"
                fi
                repo init -u git@github.com:otcxn/otcxn-rfq-build.git -b ogg_universe -m default.xml
                repo sync
                repo forall -c "git checkout master"
                repo forall -c "git pull"
                """
                script {
                    if ("${buildModule}" != "all") {
                        checkoutBranch()
                    }
                }
            }
        }

        stage('Build all Modules') {
            when {
                expression { buildModule == 'all' }
            }
            steps {
                script {
                    println("Building all LM Modules from 'master' branch....")
                    //sh "mvn --version"
                    println("RUNNING 'mvn clean deploy'")
                    sh "mvn clean deploy -DskipTests -U -s /var/lib/jenkins/.m2/settings.xml"
                }
            }
        }

        stage('Build subModule') {
            when {
                expression { buildModule != 'all' }
            }
            steps {
                script {
                    println("Building LM ${subModule}....")
                    //sh "mvn --version"
                    println("RUNNING 'mvn clean deploy' for ${app}")
                    sh "mvn clean deploy -pl ${subModule} -DskipTests -U -s ~/.m2/settings.xml --also-make"
                }
            }
        }

        stage('Publish') {
            steps {
                echo "Publishing to ${rpm}.."

                script{
                    def repo = ['s3cmd', 'createrepo']
                    for (int i = 0; i < repo.size(); ++i) {
                        echo "Testing the ${repo[i]} repo"
                        check = sh(script:"which ${repo[i]}", returnStdout:true).trim()
                        echo check
                    }

                    if ("${SOURCE_DIR}".isEmpty()) {
                        println("Source directory must be specified.")
                        sh 'exit 1';
                    }
                    if (!fileExists("${TARGET_DIR}")) {
                        sh "mkdir -pv ${TARGET_DIR}"
                    }
                    if (!fileExists("${PKG_DIR}")) {
                        sh "mkdir -pv ${PKG_DIR}"
                    }
                    if ("${TARGET_BUCKET}".isEmpty()) {
                        println("ERROR: Target bucket must be specified.")
                        sh 'exit 1'
                    }
                }

                publishPackage()
                gitTagVersion()
            }
        }
    }
}
