def rpm = "development"
def otcxn_dir = "/Users/shalu/.m2/repository/com/otcxn"
//def otcxn_dir = "/var/lib/jenkins/.m2/repository/com/otcxn"
def getTagExist(def sm) {
    println("subModule is "+ sm + ", fromBranch is " + fromBranch)
    script{
        tagExist = sh(script:"git -C ./${sm} branch -a | grep ${fromBranch} | tr -d \" \"", returnStdout:true).trim()
    }   

    sh """#!/bin/bash
    set -e
    echo "tagExist=${tagExist}"
    if [ ! -z "$tagExist" ]; then
        repo forall ${sm} -c "git checkout origin/${fromBranch}"
        echo "Status after branch checkout"
        repo forall -c "git status"
    else
        echo "ERROR: Branch ${fromBranch} does not exist in ${sm}"
        exit 1
    fi
    """
}
def publishPackage(def app) {
    script {
        if ("${buildModule}" != "all") {
            rpmPackage = sh(script:"find $SOURCE_DIR -name \"${app}*.noarch.rpm\"", returnStdout:true).trim()
            echo "SubModule Package : '${rpmPackage}'"
        }
    }
    sh "cp -rv $SOURCE_DIR $TARGET_DIR"
    def UPDATE = ""
    if (fileExists("$TARGET_DIR/noarch/repodata/repomd.xml")) {
        UPDATE = "--update"
    }
    echo "TEST OUTPUT:: <<${UPDATE}>><<${CACHE_DIR}>><<${SOURCE_DIR}>><<${TARGET_DIR}>>"
    //createrepo --cachedir=$CACHE_DIR --workers 4 -v $UPDATE --deltas $TARGET_DIR/ --max-delta-rpm-size 399999999
}
def gitTagVersion(def app) {
    script {
        if ("${buildModule}" != "all") {
                VERSION = sh(script:"ls -t ${TARGET_DIR}/noarch/${app}* | head -n1 | cut -d'/' -f7 | cut -d'-' -f3", returnStdout:true).trim()
            } else {
                VERSION = sh(script:"ls -t ${TARGET_DIR}/noarch | head -n1 | cut -d'-' -f3", returnStdout:true).trim()
            }
        sh "echo ${VERSION} >> ${PKG_DIR}/version.info"
    }
    /*
    if ("${GIT_TAG}" =~ "NONE") {
        echo "This is an SNAPSHOT build - Skip tagging"
    } else {
        echo "Release build - This build will be tagged"
        cd ${WORKSPACE}/build
        echo "$GIT_TAG:<<${$GIT_TAG}>>"
        //git tag $GIT_TAG
        //git push origin $GIT_TAG
    } */
    sh "touch $ROLLBACK_DIR/$VERSION"

    echo "tag version"
    timeStamp = sh(script:"TZ=\":America/Los_Angeles\" date +\"%Y%m%d\"", returnStdout:true).trim()
    script {
        if ("${buildModule}" != "all") {
            verNum="subModule_${app}_${BUILD_NUMBER}_${timeStamp}"
        } else {
            verNum="OggUniverse_${BUILD_NUMBER}_${timeStamp}"
        }
    }
    echo "VERSION: ${verNum} "
    sh """#!/bin/bash
    set -e
    cd ${WORKSPACE}/build
    #git tag ${verNum}
    #git push origin ${verNum}

    mkdir -p ${TARGET_DIR}/tags
    touch ${TARGET_DIR}/tags/${verNum}
    """
}

pipeline {
    /*A declarative pipeline*/

    agent any
    parameters {
        string(name: 'fromBranch', defaultValue: 'master', description: '(Please do not put "origin" with branch name)')
        choice(name: 'buildModule', choices: ['all', 'XE:crossingengine', 'PS:persistenceserver', 'SDS:staticdataserver', 'FG:fixgateway', 'CE:creditengine', 'FH:mktdatafeedhandler', 'TDB:tradedbwriter', 'TN:tradenotification', 'RG:rest_gateway', 'FM:fixmultiplexer'], description: '')
        //choice(name: 'server', choices: ['', 'development', 'qa', 'uat', 'prod'], description: '')
    }

    environment {
        home_dir="/Users/shalu"
        SOURCE_DIR="${WORKSPACE}/package/"
        //SOURCE_DIR="**/**/rpm/**/RPMS/*"
        TARGET_BUCKET="liquimatch-${rpm}-repo"
        TARGET_DIR="${home_dir}/rpm/${TARGET_BUCKET}"
        //TARGET_DIR = "/rpm/${TARGET_BUCKET}"
        CACHE_DIR="${TARGET_DIR}/dev-cache"
        PKG_DIR="${TARGET_DIR}/pkg-info"
        ROLLBACK_DIR="${home_dir}/rpm/rollback/it/ogguniverse"
        //ROLLBACK_DIR="/rpm/rollback/it/ogguniverse"
    }

    stages {
        stage('Verify inputs') {
            steps {
                sh '''#!/bin/bash
                set -e
                if [ -z "${fromBranch}" ]; then
                    echo
                    echo "ERROR: Parameters can not be empty."
                    echo "Branch Passed:<<${fromBranch}>>"
                    exit 1
                fi
                '''
            }
        }

        stage('Initialize the variables') {
            steps {
                sh '''#!/bin/bash
                echo ${buildModule} | cut -d ":" -f1 > app.txt
                echo ${buildModule} | cut -d ":" -f2 > subModule.txt
                '''
                script {
                    app = readFile('app.txt').trim()
                    subModule = readFile('subModule.txt').trim()
                }
                //input 'Do you want to continue the Build?'
            }
        }
        
        stage('Checkout branch') {
            steps {
                sh """#!/bin/bash
                set -e
                if [ -d ${otcxn_dir} ]; then 
                    rm -rf ${otcxn_dir};
                    echo "BT libs removed from <<${otcxn_dir}>>"
                fi
                repo init -u git@github.com:otcxn/otcxn-rfq-build.git -b ogg_universe -m default.xml
                repo sync
                repo forall -c "git checkout master"
                repo forall -c "git pull"
                """
                script {
                    if ("${buildModule}" != "all") {
                        getTagExist("${subModule}")
                    }
                }

                //input 'Do you want to continue the Build?'
            }
        }

        stage('Build all Modules') {
            when {
                expression { buildModule == 'all' }
            }
            steps {
                sh """#!/bin/bash
                set -e
                echo "Building all LM Modules from 'master' branch...."
                mvn --version

                echo "BUILDING 'mvn clean deploy'"
                #mvn clean deploy -DskipTests -U -s /var/lib/jenkins/.m2/settings.xml
                """
            }
        }

        stage('Build subModule') {
            when {
                expression { buildModule != 'all' }
            }
            steps {
                sh """#!/bin/bash
                set -e
                echo "Building LM ${subModule}...."
                mvn --version

                echo "BUILDING 'mvn clean deploy' for ${app}"
                #mvn clean deploy -pl ${subModule} -DskipTests -U -s ~/.m2/settings.xml --also-make
                """
            }
        }

        stage('Publish') {
            steps {
                echo "Publishing to ${rpm}.."

                script{
                    //def repo = ['s3cmd', 'createrepo']
                    def repo = ['s3cmd']
                    for (int i = 0; i < repo.size(); ++i) {
                        echo "Testing the ${repo[i]} repo"
                        check = sh(script:"which ${repo[i]}", returnStdout:true).trim()
                        echo check
                    }
                }

                sh """#!/bin/bash
                set -e
                if [ -z "${SOURCE_DIR}" ]; then
                    echo "ERROR: Source directory must be specified."
                    exit 1
                fi
                if [ -z "${TARGET_BUCKET}" ]; then
                    echo "ERROR: Target bucket must be specified."
                    exit 1
                fi
                if ! [ -e "${TARGET_DIR}"]; then
                    mkdir -pv ${TARGET_DIR}
                fi
                if ! [ -e "${PKG_DIR}"]; then
                    mkdir -pv ${PKG_DIR}
                fi
                """
                publishPackage("${app}")
                gitTagVersion("${app}")


            }
        }
    }
}
