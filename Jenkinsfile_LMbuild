pipeline {
    /*A declarative pipeline*/

    agent any
    parameters {
        string(name: 'patchBranch', defaultValue: 'master', description: 'Hot Fix branch. (Please do not put "origin" with branch name)')
        choice(name: 'buildModule', choices: ['', 'PS:persistenceserver', 'SDS:staticdataserver', 'FG:fixgateway', 'CE:creditengine', 'XE:crossingengine', 'FH:mktdatafeedhandler', 'TDB:tradedbwriter', 'TN:tradenotification', 'RG:rest_gateway', 'FM:fixmultiplexer'], description: '')
        choice(name: 'env', choices: ['', 'development', 'qa', 'uat', 'prod'], description: '')
    }

    stages {
        stage('Verify inputs') {
            steps {
                sh '''#!/bin/bash
                if [ -z "${patchBranch}" ] || [ -z "${buildModule}" ] || [ -z "${env}" ]; then
                    echo
                    echo "ERROR"
                    echo "Parameters can not be empty."
                    echo "<<${patchBranch}>><<${buildModule}>><<${env}>>"
                    exit 1
                fi
                echo "<<${patchBranch}>><<${buildModule}>><<${env}>>"
                '''
                input 'Do you want to continue the Build?'
            }
        }

        stage('Initialize the variables') {
            steps {
                sh '''#!/bin/bash
                app1=`echo ${buildModule} | cut -d ":" -f1`
                subModule1=`echo ${buildModule} | cut -d ":" -f2`                
                '''
            }
            script
            {
                app = ${app1}
                subModule = ${subModule1}
                SOURCE_DIR = "**/**/rpm/**/RPMS/*"
                TARGET_BUCKET = "liquimatch-${env}-repo"
                ROLLBACK_DIR = "/rpm/rollback/qa/ogguniverse"
                TARGET_DIR = "/rpm/${TARGET_BUCKET}"
                CACHE_DIR = "${TARGET_DIR}/dev-cache"

            }
        }
        
        stage('Checkout branch') {
            steps {
                sh '''#!/bin/bash
                repo init -u git@github.com:otcxn/otcxn-rfq-build.git -b ogg_universe -m default.xml
                repo sync
                repo forall -c "git checkout master"
                repo forall -c "git pull"

                tagExist=$(git -C ./${subModule} branch -a | grep ${patchBranch} | tr -d " ")
                echo "tagExist=${tagExist}"

                if [ ! -z "$tagExist" ]; then
                    repo forall ${subModule} -c "git checkout origin/${patchBranch}"
                    if [ "$?" != "0" ]; then
                      echo
                      echo "ERROR: ${patchBranch} is not applied in the module"
                      exit 1
                    fi
                fi
                '''
            }
        }

        stage('Build subModule') {
            steps {
                sh '''#!/bin/bash
                echo 'Building LM ${subModule}....'
                mvn --version

                echo "BUILDING 'mvn clean deploy' for ${app}"
                mvn clean deploy -pl ${subModule} -DskipTests -U -s ~/.m2/settings.xml --also-make
                '''
            }
        }

        stage('Publish') {
            steps {
                sh '''#!/bin/bash
                echo 'Publishing to ${env}..'
                
                '''
            }
        }
        
        stage('Deploy') {
            steps {
                sh '''#!/bin/bash
                echo 'Deploying....'
                
                '''
            }
        }

    }
}
